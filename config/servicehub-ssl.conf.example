#
# this is a sample config to be used for production
# you have to use a real FQDN doman name, and provide a valid SSL certificate
#   we only listen on http (port 80) and https (port 443)
#   all http trafic is redirected to https
#
<VirtualHost *:80>
    ServerName myservice.mydomain.org
    #
    # redirect http to https
    RewriteEngine On
    RewriteCond %{HTTPS} off
    RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}
</VirtualHost>


<VirtualHost *:443>
    # Your domain name
    ServerName myservice.mydomain.org

    #
    # SSL config
    #
    SSLEngine on
    SSLCertificateChainFile "/etc/letsencrypt/certs/letsencrypt-intermediate-ca.pem"
    SSLCertificateFile "/etc/letsencrypt/certs/myservice.mydomain.org.crt"
    SSLCertificateKeyFile "/etc/letsencrypt/certs/myservice.mydomain.org.key"


    # The OIDC service provider. For the HBP, it is here:
    OIDCProviderMetadataURL "https://services.humanbrainproject.eu/oidc/.well-known/openid-configuration"
    # You can register your OpenID Client from https://collab.humanbrainproject.eu/#/collab/54/nav/1051
    # using the server flow. Set the redirect_uri to your domain + /redirect_uri, and
    # change it to match OIDCRedirectURI bellow.
    # Obtain these from the HBP OpenID Server.
    OIDCClientID "My-Client-ID"
    OIDCClientSecret "My-OpenID-Secret"
    # /redirect_uri is used to authenticate you. It will be consumed by Apache and will not be requests to it
    # will not be forwarded to your application.
    OIDCRedirectURI "https://myservice.mydomain.org/redirect_uri"
    # Set a random passphrase here
    OIDCCryptoPassphrase "I should be a random password. Please set me."
    # Don't change this one, it is used by oidc
    OIDCAuthNHeader "userid"

    # You should not need to modify anything bellow here.

    DocumentRoot /var/www/html

    # This enables openID. Leave as is.
    <Location "/">
        AuthType openid-connect
        Require valid-user
    </Location>

    # This handles proxying, leave as is.
    RewriteEngine On
    ProxyAddHeaders On
    ProxyPreserveHost On
    #
    # special url used by mod oidc, do not proxy
    ProxyPass /redirect_uri !
    #
    # proxy all other calls to traefic, with special case for websocket
    #
    # if request contains a upgrade header, proxy to websocket
    RewriteCond %{HTTP:Upgrade} =websocket [NC]
    RewriteRule /(.*)           ws://proxy/$1 [P,L]

    # otherwise proxy a http
    RewriteCond %{HTTP:Upgrade} !=websocket [NC]
    RewriteRule /(.*)           http://proxy/$1 [P,L]

    # proxy reverse (for possible redirects)
    ProxyPassReverse / http://proxy/
</VirtualHost>
